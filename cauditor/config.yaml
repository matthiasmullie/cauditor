site:
    title: cauditor
    description: Figure out complexity hotspots in the blink of an eye.
    domain: www.cauditor.org
    host: https://www.cauditor.org
    path: $REQUEST_URI
    twitter: cauditor_org
    assets: cauditor/assets

mysql:
    user: $RDS_USERNAME
    pass: $RDS_PASSWORD
    db: $RDS_DB_NAME
    host: $RDS_HOSTNAME
    port: $RDS_PORT

s3:
    bucket: $S3_BUCKET
    region: $S3_REGION
    access_key: $S3_ACCESS_KEY
    secret_key: $S3_SECRET_KEY

github:
    id: $GITHUB_ID
    secret: $GITHUB_SECRET
    # https://developer.github.com/v3/oauth/#scopes
    scopes: repo,user:email,write:repo_hook

charts:
    -
        code: "mi"
        name: "Maintainability Index"
        description: |
            <p>The maintainability index tries to indicate how hard a program is to maintain, by taking into account cyclomatic complexity, Halstead intelligent content and the amount of lines of code. The index is scored from 0 to 100, with 100 being very maintainable.</p>
            <pre>Maintainability index = max(0, (171 - 5.2 * ln(Halstead volume) - 0.23 * (cyclomatic complexity) - 16.2 * ln(lines of code)) * 100 / 171)</pre>
        files: ["/assets/js/visualizations/treemap/Method.js"]
        class: "Cauditor.Visualization.Treemap.Method"
        # 100-20 is considered ok; 20-10 suspicious; 10-0 bad
        # given the long green range and very low threshold, things can start to turn orange-ish a bit earlier
        # @see http://blogs.msdn.com/b/codeanalysis/archive/2007/11/20/maintainability-index-range-and-meaning.aspx
        range: [80, 45, 35]
    -
        code: "ccn"
        name: "Cyclomatic Complexity"
        description: |
            <p>Cyclomatic complexity is calculated by counting the amount of decision paths. After an <code>if</code> statement, your code can go do 2 different things. Every conditional statement increases the complexity of your program. It's harder to test, likely contains more bugs & is harder to understand when you look at it again.</p>
            <p>The cyclomatic complexity is calculated by counting the amount of these conditional statements in the code: <code>?</code>, <code>&&</code>, <code>||</code>, <code>and</code>, <code>or</code>, <code>xor</code>, <code>if</code>, <code>elseif</code>, <code>for</code>, <code>foreach</code>, <code>case</code>, <code>while</code> & <code>catch</code>.</p>
        files: ["/assets/js/visualizations/treemap/Method.js"]
        class: "Cauditor.Visualization.Treemap.Method"
        # 1-4 green-ish; 5-7 yellow-ish; 8-10: orange-ish; 10+: red
        # @see http://phpmd.org/rules/codesize.html#npathcomplexity
        range: [0, 6, 11]
    -
        code: "hi"
        name: "Halstead Intelligent Content"
        description: |
            <p>Halstead intelligent content represents the algorithm complexity in a mostly language-agnostic way by counting the amount of operators (<code>+</code>, <code>=</code>, <code>&&</code>, &hellip; and reserved words) and operands (variables, function names, &hellip;)</p>
            <pre>
            n1 = amount of unique operators
            n2 = amount of unique operand
            N1 = total amount of operators
            N2 = total amount of operands

            N = N1 + N2 = program length
            V = N * log2(n1 + n2) = program volume
            L = (2 / n1) * (n2 / N2) = program level
            D = 1 / L = program difficulty
            I = V / D = intelligent content
            </pre>
            <p>The more operators or operands, the bigger the program volume. More unique operators or fewer unique operands means higher difficulty. Given 2 different implementations of a same algorithm, the longer one will score higher.</p>
        files: ["/assets/js/visualizations/treemap/Method.js"]
        class: "Cauditor.Visualization.Treemap.Method"
        range: [0, 40, 60]
    -
        code: "i"
        name: "Instability"
        description: |
            <p>The instability is based on the efferent and afferent coupling of the class and indicates how resilient a class is to change: 0 being very resilient & 1 very unstable. Classes using a lot of other classes are less resilient to change because they may have to respond to changes in those other classes.</p>
            <pre>I = efferent coupling / (efferent coupling + afferent coupling)</pre>
        files: ["/assets/js/visualizations/treemap/Class.js", "/assets/js/visualizations/treemap/Instability.js"]
        class: "Cauditor.Visualization.Treemap.Instability"
        # range from 0 to 1, with 0 indicating a package very resilient to change in
        # dependency classes; 1 being very unstable
        # going with green-ish for 70% of the index so only the really problematic
        # parts light up (it's pretty easy to score very high on this metric)
        range: [.2, .75, .8]
    -
        code: "ca"
        name: "Afferent Coupling"
        description: |
            <p>Afferent coupling measures the responsibility of a class by counting the incoming dependencies, or how often a class is used in other classes. The higher the value, the more important the class is and the bigger its impact on the codebase. Changes to or bugs in these areas can have a big impact since cover a lot of the codebase.</p>
            <p>Core functionality usually scores rather high on this metric.</p>
        files: ["/assets/js/visualizations/treemap/Class.js"]
        class: "Cauditor.Visualization.Treemap.Class"
        # being used by lots of other packages can signify the class isn't independent enough
        # being high means having a lot of impact on the codebase, lots of others depend on you
        range: [0, 5, 10]
    -
        code: "ce"
        name: "Efferent Coupling"
        description: |
            <p>Efferent coupling is very similar to the stability index (which is in large part based on this number) and reflects how much a class depends on other classes.</p>
            <p>You can expect high efferent coupling in 'god classes' - those that decide what other places to fan out to (e.g. routers) - but it can also expose unfocused classes that try to do too much and should be decomposed into more discrete classes with a single purpose.</p>
        files: ["/assets/js/visualizations/treemap/Class.js"]
        class: "Cauditor.Visualization.Treemap.Class"
        # using lots of other packages can signify the class has too much responsibilities
        range: [0, 10, 20]

session:
    # 30 days (30 * 24 * 60 * 60 seconds)
    max_age: 2592000

data:
    # json path
    path: "{pwd}/data/{project}/{hash}.json"  # @todo: will have to change when using S3
    repo_path: /tmp/repos/{project}
    pdepend_path: /tmp/pdepend/{project}
